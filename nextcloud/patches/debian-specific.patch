Description: Include config in maintenance:install
 These changes ensure config is read in maintenance::install, enabling safe
 initialization of the server.
 .
 nextcloud-server (20.0.4-1) buster; urgency=medium
 .
Author: Martin Habovstiak <martin.habovstiak@gmail.com>
Last-Update: 2021-02-02

--- nextcloud-server-20.0.4.orig/core/Command/Maintenance/Install.php
+++ nextcloud-server-20.0.4/core/Command/Maintenance/Install.php
@@ -31,6 +31,9 @@
 
 namespace OC\Core\Command\Maintenance;
 
+require_once __DIR__ . '/../../../lib/base.php';
+
+use OC;
 use bantu\IniGetWrapper\IniGetWrapper;
 use InvalidArgumentException;
 use OC\Installer;
@@ -112,6 +115,27 @@ class Install extends Command {
 		return 0;
 	}
 
+	protected function getOption(InputInterface $input, string $name) {
+		$option_mapping = [
+			'database' => 'dbtype',
+			'database-user' => 'dbuser',
+			'database-pass' => 'dbpassword',
+			'database-name' => 'dbname',
+			'database-host' => 'dbhost',
+			'admin-user' => 'adminlogin',
+			'admin-pass' => 'adminpass',
+			'admin-email' => 'adminemail',
+			'data-dir' => 'datadirectory',
+		];
+		// Ideally CLI args would override conf args not the other way around but Symfony doesn't
+		// expose an API to check if argument was given. >:(
+		if (in_array($option_mapping[$name], OC::$config->getKeys())) {
+			return OC::$config->getValue($option_mapping[$name]);
+		} else {
+			return $input->getOption($name);
+		}
+	}
+
 	/**
 	 * @param InputInterface $input
 	 * @param OutputInterface $output
@@ -119,33 +143,33 @@ class Install extends Command {
 	 * @return array
 	 */
 	protected function validateInput(InputInterface $input, OutputInterface $output, $supportedDatabases) {
-		$db = strtolower($input->getOption('database'));
+		$db = strtolower($this->getOption($input, 'database'));
 
 		if (!in_array($db, $supportedDatabases)) {
 			throw new InvalidArgumentException("Database <$db> is not supported.");
 		}
 
-		$dbUser = $input->getOption('database-user');
-		$dbPass = $input->getOption('database-pass');
-		$dbName = $input->getOption('database-name');
-		$dbPort = $input->getOption('database-port');
+		$dbUser = $this->getOption($input, 'database-user');
+		$dbPass = $this->getOption($input, 'database-pass');
+		$dbName = $this->getOption($input, 'database-name');
+		$dbPort = $this->getOption($input, 'database-port');
 		if ($db === 'oci') {
 			// an empty hostname needs to be read from the raw parameters
 			$dbHost = $input->getParameterOption('--database-host', '');
 		} else {
-			$dbHost = $input->getOption('database-host');
+			$dbHost = $this->getOption($input, 'database-host');
 		}
 		if ($dbPort) {
 			// Append the port to the host so it is the same as in the config (there is no dbport config)
 			$dbHost .= ':' . $dbPort;
 		}
 		if ($input->hasParameterOption('--database-pass')) {
-			$dbPass = (string) $input->getOption('database-pass');
+			$dbPass = (string) $this->getOption($input, 'database-pass');
 		}
-		$adminLogin = $input->getOption('admin-user');
-		$adminPassword = $input->getOption('admin-pass');
-		$adminEmail = $input->getOption('admin-email');
-		$dataDir = $input->getOption('data-dir');
+		$adminLogin = $this->getOption($input, 'admin-user');
+		$adminPassword = $this->getOption($input, 'admin-pass');
+		$adminEmail = $this->getOption($input, 'admin-email');
+		$dataDir = $this->getOption($input, 'data-dir');
 
 		if ($db !== 'sqlite') {
 			if (is_null($dbUser)) {
--- nextcloud-server-20.0.4.orig/lib/base.php
+++ nextcloud-server-20.0.4/lib/base.php
@@ -130,7 +130,7 @@ class OC {
 	/**
 	 * @var \OC\Config
 	 */
-	private static $config = null;
+	public static $config = null;
 
 	/**
 	 * @throws \RuntimeException when the 3rdparty directory is missing or
